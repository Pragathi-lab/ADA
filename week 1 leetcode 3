#define MAX_DEPTH 20

int lengthLongestPath(const char * input){
	int maxLen = 0;

	int lenStack[MAX_DEPTH];
	int lenStackLen = 0;

	int totalLen = 0;

	while (1){
		int tabCnt = 0;
		for (; '\t' == *input; input += 1){
			tabCnt += 1;
		}

		int nameLen = 0;
		bool isFile = false;
		for (; *input != '\0' && *input != '\n'; input += 1){
			if ('.' == *input){
				isFile = true;
			}
			nameLen += 1;
		}

		while (lenStackLen > tabCnt){
			totalLen -= lenStack[lenStackLen - 1];
			lenStackLen -= 1;
		}
		assert(lenStackLen == tabCnt);

		if (!isFile){
			lenStack[lenStackLen] = nameLen;
			lenStackLen += 1;
			totalLen += lenStack[lenStackLen - 1];
		}else {
			const int curLen = totalLen + tabCnt + nameLen;
			if (curLen > maxLen){
				maxLen = curLen;
			}
		}

		if ('\0' == *input){
			break;
		}
		assert('\n' == *input);
		input += 1;
	}

	return maxLen;
}
